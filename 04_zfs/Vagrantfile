# -*- mode: ruby -*-
# vim: set ft=ruby :
home = ENV['HOME']
ENV["LC_ALL"] = "en_US.UTF-8"

MACHINES = {
  :otuszfs => {
        :box_name => "centos/8",
	:box_version => "2011.0",
        :ip_addr => '10.10.10.10',
	:disks => {
		:sata1 => {
			:dfile => home + '/VirtualBox VMs/disks/sata1.vdi',
			:size => 200,
			:port => 1
		},
		:sata2 => {
            :dfile => home + '/VirtualBox VMs/disks/sata2.vdi',
            :size => 200, # Megabytes
			:port => 2
		},
        :sata3 => {
            :dfile => home + '/VirtualBox VMs/disks/sata3.vdi',
            :size => 200,
            :port => 3
        },
        :sata4 => {
            :dfile => home + '/VirtualBox VMs/disks/sata4.vdi',
            :size => 200, # Megabytes
            :port => 4
        },
        :sata5 => {
            :dfile => home + '/VirtualBox VMs/disks/sata5.vdi',
            :size => 200, # Megabytes
            :port => 5
        },
        :sata6 => {
            :dfile => home + '/VirtualBox VMs/disks/sata6.vdi',
            :size => 200, # Megabytes
            :port => 6
        },
        :sata7 => {
            :dfile => home + '/VirtualBox VMs/disks/sata7.vdi',
            :size => 200, # Megabytes
            :port => 7
        },
        :sata8 => {
            :dfile => home + '/VirtualBox VMs/disks/sata8.vdi',
            :size => 200,
            :port => 8
        }
	}
  },
}

Vagrant.configure("2") do |config|

  config.vm.box_version = "2011.0"
  config.vm.box_check_update = false
  MACHINES.each do |boxname, boxconfig|

      config.vm.define boxname do |box|

          box.vm.box = boxconfig[:box_name]
          box.vm.host_name = boxname.to_s

          box.vm.network "private_network", ip: boxconfig[:ip_addr]

          box.vm.provider :virtualbox do |vb|
                vb.memory = "1024"
                vb.cpus = "2"
                  needsController = false
		  boxconfig[:disks].each do |dname, dconf|
			  unless File.exist?(dconf[:dfile])
				vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                                needsController =  true
                          end

		  end
                  if needsController == true
                     vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                     boxconfig[:disks].each do |dname, dconf|
                         vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                     end
                  end
          end

      box.vm.provision "shell", inline: <<-SHELL
	      mkdir -p ~root/.ssh
          cp ~vagrant/.ssh/auth* ~root/.ssh
	      yum install -y nano mc wget langpacks-en glibc-all-langpacks
  	  SHELL
        
        box.vm.provision "shell", path: "installzfs.sh"

      end
  end
end

